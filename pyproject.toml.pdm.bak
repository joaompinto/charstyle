[project]
name = "charstyle"
version = "0.1.0"
description = "A library for styling terminal text with ANSI escape sequences"
authors = [
    {name = "JoÃ£o Pinto", email = "lamego.pinto@gmail.com"},
]
dependencies = []
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[project.urls]
Homepage = "https://github.com/joaompinto/charstyle"
Repository = "https://github.com/joaompinto/charstyle"
Issues = "https://github.com/joaompinto/charstyle/issues"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.scripts]
# Linting and formatting
lint = "ruff check --fix ."
lint-check = "ruff check ."
lint-all = "ruff check --fix --unsafe-fixes ."
format = "black ."
format-check = "black --check ."

# Testing
test = "python -m unittest discover -s tests"
coverage = "coverage run -m unittest discover && coverage report"
coverage-html = "coverage run -m unittest discover && coverage html"

# Type checking
typecheck = "mypy charstyle"

# Building and publishing
build = "pdm build"
publish = "pdm publish --repository pypi"
publish-test = "pdm publish --repository testpypi"

# Combined tasks
check-all = { composite = ["format-check", "lint-check", "test"] }
pre-commit = { composite = ["format", "lint", "test"] }

# Documentation
docs = "pdoc --html --output-dir docs/ charstyle"

# Utilities
clean = "rm -rf **/__pycache__ **/*.pyc **/*.pyo **/*.pyd .coverage .pytest_cache htmlcov dist build docs"
examples = { shell = "for f in examples/*.py; do [ \"$f\" != 'examples/__pycache__' ] && echo \"\\n=== Running: $f ===\\n\" && python \"$f\"; done" }
example = { shell = "python examples/$1" }

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
# Same as Black
line-length = 100
# Target Python version
target-version = "py311"

[tool.ruff.lint]
# Enable specific rules
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
# Ignore specific rules
ignore = [
    "E501",  # line too long
]
# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []
# Exclude a variety of commonly ignored directories
exclude = [
    ".git",
    ".github",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint.isort]
known-first-party = ["charstyle"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[dependency-groups]
dev = [
    "ruff>=0.1.6",
    "black>=25.1.0",
    "ruff>=0.1.6",
    "black>=23.11.0",
    "coverage>=7.6.12",
    "mypy>=1.15.0",
    "pdoc>=15.0.1",
]
